#ifndef _BBM_DRJIT_MATH_H_
#define _BBM_DRJIT_MATH_H_

#include <cmath>

#include "drjit/math.h"

#include "util/poly.h"
#include "core/value.h"
#include "backbone/vec.h"

/************************************************************************/
/*! \file math.h

  \brief Connect bbm math functions to the corresponding DrJIT methods.

  Satisfies: concepts::backbone::has_math_functions

*************************************************************************/

namespace backbone {

  /**********************************************************************/
  /*! \brief Helper Macro for mapping a math operation to drjit. Takes in
    account to pass the 'value' of the variables; drjit does not always
    correctly perform implicit casting to the underlying value (e.g., with
    attributes).
  ***********************************************************************/
#define BBM_DRJIT_MATHOP(OpName)                                         \
  template<typename... Ts> requires requires(const Ts&... t) {{drjit::OpName(bbm::value(t)...)};} \
    inline constexpr auto OpName(const Ts&... t)                         \
  {                                                                      \
    return drjit::OpName(bbm::value(t)...);                              \
  }                                                                      \
  
  /**********************************************************************/
  /*! @{ \name Map math operations to DrJIT functions
   **********************************************************************/
  BBM_DRJIT_MATHOP(exp);
  BBM_DRJIT_MATHOP(log);
  BBM_DRJIT_MATHOP(sin);
  BBM_DRJIT_MATHOP(asin);
  BBM_DRJIT_MATHOP(cos);
  BBM_DRJIT_MATHOP(acos);
  BBM_DRJIT_MATHOP(tan);
  BBM_DRJIT_MATHOP(atan);
  BBM_DRJIT_MATHOP(atan2);
  BBM_DRJIT_MATHOP(sinh);
  BBM_DRJIT_MATHOP(asinh);
  BBM_DRJIT_MATHOP(cosh);
  BBM_DRJIT_MATHOP(acosh);
  BBM_DRJIT_MATHOP(tanh);
  BBM_DRJIT_MATHOP(atanh);
  BBM_DRJIT_MATHOP(ceil);
  BBM_DRJIT_MATHOP(floor);
  BBM_DRJIT_MATHOP(round);
  BBM_DRJIT_MATHOP(clamp);
  BBM_DRJIT_MATHOP(fmod);
  BBM_DRJIT_MATHOP(copysign);
  BBM_DRJIT_MATHOP(sign);
  BBM_DRJIT_MATHOP(lerp);
  BBM_DRJIT_MATHOP(abs);
  BBM_DRJIT_MATHOP(sqrt);
  BBM_DRJIT_MATHOP(cbrt);
  BBM_DRJIT_MATHOP(pow);
  BBM_DRJIT_MATHOP(safe_sqrt);
  BBM_DRJIT_MATHOP(safe_asin);
  BBM_DRJIT_MATHOP(safe_acos);
  BBM_DRJIT_MATHOP(erf);
  BBM_DRJIT_MATHOP(erfinv);
  BBM_DRJIT_MATHOP(tgamma);
  BBM_DRJIT_MATHOP(lgamma);
  BBM_DRJIT_MATHOP(eq);
  BBM_DRJIT_MATHOP(neq);
  BBM_DRJIT_MATHOP(rcp);
  BBM_DRJIT_MATHOP(rsqrt);
  BBM_DRJIT_MATHOP(isnan);
  BBM_DRJIT_MATHOP(isinf);
  BBM_DRJIT_MATHOP(isfinite);
  //! @}
  
  // clean up macro
  #undef BBM_DRJIT_MATHOP

  /********************************************************************/
  /*! \brief max between two variables
   ********************************************************************/
  template<typename T, typename U>
    inline auto max(T&& t, U&& u)
  {
    return drjit::select(t > u, std::forward<T>(t), std::forward<U>(u));
  }

  /********************************************************************/
  /*! \brief min between two variables
   ********************************************************************/
  template<typename T, typename U>
    inline auto min(T&& t, U&& u)
  {
    return drjit::select(t < u, std::forward<T>(t), std::forward<U>(u));
  }
  
  /********************************************************************/
  /*! \brief erfc

    TODO: make more robust
   ********************************************************************/
  template<typename T>
    inline T erfc(const T& t)
  {
    return drjit::scalar_t<T>(1) - drjit::erf(t);
  }
  
  /********************************************************************/
  /*! \brief cossin

    \param a = angle
    \returns the cos and sin in a vec2d
   ********************************************************************/
  template<typename T>
    vec2d<T> cossin(const T& a)
  {
    auto tmp = drjit::sincos(a);
    return {tmp.second, tmp.first};
  }

} // end backbone namespace

#endif /* _BBM_DRJIT_MATH_H_ */
