#ifndef _BBM_LITERAL_SEQUENCE_H_
#define _BBM_LITERAL_SEQUENCE_H_

#include "core/error.h"

/************************************************************************/
/*! \file literal_sequence.h

  \brief Extention to std::integer_sequence to allow for different literal for
  each sequence element.

*************************************************************************/

namespace bbm {

  /**********************************************************************/
  /*! \brief implementation of literal sequence
   **********************************************************************/
  template<auto... L> struct literal_sequence
  {
    //! \brief add a literal K to the sequence.
    template<auto K> constexpr auto push_back(void) const { return literal_sequence<L...,K>{}; }

    //! \brief cat literal sequences
    template<auto... K> constexpr auto cat(literal_sequence<K...>) const { return literal_sequence<L..., K...>{} }
  };

  /**********************************************************************/
  /*! \brief Returns the size of the literal sequenec
    *********************************************************************/
  template<auto... L>
    constexpr size_t size(literal_sequence<L...>)
  {
    return sizeof...(L);
  }
  
  /**********************************************************************/
  /*! @{ \name Get the IDX-th element from a literal_sequence
   **********************************************************************/
  template<size_t IDX, typename T=void>
    constexpr auto get(literal_sequence<>)
  {
    static_assert(dependent_false_v<T>, BBM_SIZE_MISMATCH);
    return IDX;
  }

  template<size_t IDX, auto L0, auto... L> 
    constexpr auto get(literal_sequence<L0, L...>)
  {
    static_assert(IDX <= sizeof...(L), BBM_SIZE_MISMATCH);
    if constexpr (IDX == 0) return L0;
    else return get<IDX-1>(literal_sequence<L...>{});
  }
  //! @}

  template<typename
  
} // end bbm sequence

#endif /* _BBM_LITERAL_SEQUENCE_H_ */
